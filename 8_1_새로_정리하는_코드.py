# -*- coding: utf-8 -*-
"""8/1 새로 정리하는 코드.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_TfgXs9pRwYkH0OXJZe5vJOvtKGSeJzQ

# 모듈 import / API Token 설정
"""

import json
import requests
from requests import Response
from bs4 import BeautifulSoup
import pandas as pd

global kobis_key, kmdb_key, tmdb_key, dataverse_key

with open('./sample_data/credentials.json', 'r') as file:
    credentials = json.load(file)
    kobis_key: str = credentials["kobis_key"]  # kobis api token
    kmdb_key: str = credentials["kmdb_key"]  # kmdb api token
    tmdb_key: str = credentials["tmdb_key"]  # tmdb api token
    dataverse_key: str = credentials["dataverse_key"] # dataverse api token

"""# 함수 설정

## get_kobis_movie_code((movie_name: str))
"""

def get_kobis_movie_code(movie_name: str):
    '''
    kobis api로부터 영화 식별 코드를 받는 함수
    :param movie_name: 영화 이름
    :return: kobis 영화 식별 코드 저장하는 리스트
    '''
    # 영화 목록 요청 url
    url: str = "http://kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieList.json"

    # query parameter
    params: dict = {"key": kobis_key,
                    "itemPerPage": 100,
                    "movieNm": movie_name}
    # HTTP response
    response: Response = requests.get(url, params=params)

    # JSON deserialize
    response_json = json.loads(response.text)
    # 결과값이 있을 경우 탐색
    # 영화 이름이 정확히 일치하고 제작국가가 한국 또는 대한민국일 때만 영화 코드 저장
    # 아래 리스트에 영화코드 저장
    kobis_code = []
    if response_json["movieListResult"].get("totCnt") > 0:
      for movie in response_json["movieListResult"]["movieList"]:
        if movie["movieNm"] == movie_name and movie["repNationNm"] in ("한국", "대한민국"):
          kobis_code.append(movie["movieCd"])
    return kobis_code

get_kobis_movie_code('마녀')

"""## get_kobis_metadata(movie_code: str)"""

def get_kobis_metadata(movie_code: str):
    '''
    영화 식별 코드를 이용해서 kobis api로부터 영화 메타데이터를 받는 함수
    :param movie_code: kobis 영화 식별 코드
    :return: kobis 영화 메타데이터
    '''

    # 영화 상세정보 요청 url
    url: str = "http://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.json"

    # query parameter
    params: dict = {"key": kobis_key,
                    "movieCd": movie_code}

    # HTTP response
    response: Response = requests.get(url, params=params)

    # JSON deserialize
    response_json = json.loads(response.text)

    return response_json["movieInfoResult"]['movieInfo']

get_kobis_metadata((get_kobis_movie_code('마녀')))

"""## get_kmdb_metadata(movie_name: str)"""

def get_kmdb_metadata(movie_name: str):
    '''
    kmdb api로부터 영화 메타데이터를 받는 함수
    :param: movie_name: 영화 이름
    :return: kmbd 영화 메타데이터
    '''

    url: str = "http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_json2.jsp?collection=kmdb_new2"

    params: dict = {"ServiceKey": kmdb_key,
                    "listCount": 1000,
                    "title": movie_name}

    # HTTP response
    response: Response = requests.get(url, params=params)

    # JSON deserialize
    kmdb_metadata_list = []
    response_json = json.loads(response.text)
    if response_json["TotalCount"] > 0:
      return response_json["Data"][0]["Result"]

get_kmdb_metadata('히어로')

"""## producer(company), distributor(company), posterUrl(posters)"""

def producer(company):
  # company is an item in a list: kobis_metadata["companys"]
  if company["companyPartNm"] == "제작사":
    return company["companyNm"]

def distributor(company):
  # company is a list: kobis_metadata["companys"]
  if company["companyPartNm"] == "배급사":
    return company["companyNm"]

# http -> https:// for security reasons
def posterUrl(posters):
  poster = posters.split("|")[:1]
  poster = [i.replace("http","https") for i in poster]
  return poster

"""## change_genre(kobis_genre_list)"""

# 장르명을 바꿔주는 함수 change_genre()
def change_genre(kobis_genre_list):
  before = ['미스터리', '가족', '판타지', '전쟁', 'SF', '멜로/로맨스', '공포(호러)']
  after = ['스릴러', '드라마', 'SF/판타지', '액션', 'SF/판타지', '로맨스', '공포']
  for i in range(len(kobis_genre_list)):
    for j in range(len(before)):
      if kobis_genre_list[i] == before[j]:
        kobis_genre_list[i] = after[j]
  return kobis_genre_list

# '서부극(웨스턴)', '성인물(에로)', '다큐멘터리', '기타' 장르 제거
def genre_modification(kobis_genre_list):
  blacklist = ['서부극(웨스턴)', '성인물(에로)', '다큐멘터리', '기타']
  for i in kobis_genre_list:
    if i in blacklist:
      return -1

  # '공연', '뮤지컬' 장르명 처리
  if '공연' in kobis_genre_list:
    if len(kobis_genre_list) ==1:
      return -1
    else:
      kobis_genre_list.remove('공연')

  if '뮤지컬' in kobis_genre_list:
    if len(kobis_genre_list) ==1:
      return -1
    else:
      kobis_genre_list.remove('뮤지컬')

  # '사극' 장르명 처리
  if '사극' in kobis_genre_list:
    if len(kobis_genre_list) ==1:
      kobis_genre_list[kobis_genre_list.index('사극')] = '드라마'
    else:
      kobis_genre_list.remove('사극')

  kobis_genre_list = change_genre(kobis_genre_list)

  # 중복된 장르 제거
  kobis_genre_list = list(set(kobis_genre_list))

  return kobis_genre_list

"""## trailer(movieCd): choose the trailer url by using BeautifulSoup"""

# use BeautifulSoup to get vodUrl
vodUrl_list = []

def trailer(movieCd):
  vodUrl_list.clear()
  alpha = movieCd[0]
  number = movieCd[1:]
  url = f"http://kmdb.or.kr/db/kor/detail/movie/{alpha}/{number}/own/videoData"
  r = requests.get(url.format(alpha, number))
  soup = BeautifulSoup(r.text, 'html.parser')

  for li in soup.find_all('li', class_='pt0'):
    text = li.find('span', attrs = {'class': "timeline-musicvideo"}).get_text()
    vodUrl = li.a['href']
    result = vodUrl[20:36]
    if text == '예고편':
      vodUrl_list.append(f"https://www.kmdb.or.kr/trailer/trailerPlayPop?pFileNm={result}")

"""## write(metadata_base): create json file"""

def write(metadata_base):
  # create json file
  title = metadata_base["title"]
  file_path = f"./sample_data/movie/{title}.json"
  json_data = json.dumps(metadata_base, ensure_ascii=False)
  with open(file_path, 'w') as f:
      f.write(json_data)

"""## get_movie_metadata(movie_name)"""

def get_metadata_per_movie(movie_name: str):
  '''
  같은 이름의 영화가 2개 이상일 경우를 위해 만든 함수
  kobis_code 리스트에 있는 각 코드에 대해 get_movie_metadata 불러오는 혈식
  '''
  kobis_movie_code = get_kobis_movie_code(movie_name)
  for kobis_movie in kobis_movie_code:
    kobis_metadata = get_kobis_metadata(kobis_movie)
    result = get_movie_metadata(kobis_metadata,movie_name)
    if result == -1:
      print("No Match .. Skipping this movie")
      continue
    print(movie_name)
    dataset_response = make_film_dataset(movie_name, result)
    print(dataset_response)

def get_movie_metadata(kobis_metadata: dict, movie_name: str):
    '''
    영화 메타데이터를 요청하고 dict 형태로 반환하는 함수
    :param movie_name: 영화 이름
    :return: dataverse에 업로드할 수 있는 json 메타데이터 형식
    '''

    metadata_base = {
        "title": "sample",
        "titleEng": "sample",
        "genre": [],
        "synopsis": {},
        "openDate": "sample",
        "runningTimeMinute": 0,
        "actors": [],
        "directors": [],
        "producer" : [],
        "distributor": [],
        "keywords": [],
        "posterUrl": "",
        "vodUrl": []
    }

    kmdb_metadata = get_kmdb_metadata(movie_name)
    # 감독명이 없을 경우 빼기
    if(kobis_metadata["directors"]==[]):
      print('No director')
      return -1
    else:
      metadata_base["directors"] = kobis_metadata["directors"]

    movie_match: dict = dict()
    flag = 0
    # kmdb에서 찾아진 영화가 없을 경우 return -1 -> 데이터버스에 올라가지 않음
    if kmdb_metadata == None:
      print("No matching movie (kobis & KMDB)")
      return -1
    # 매치되는 영화가 없을 경우 빼기 (vodUrl없으면 의미가 없으며, 이를 통해 kmdb상 한국 영화가 아닌 것 걸러짐. kobis상에서 한국영화 제작한 감독만 파일에 업로드하였기 때문.)
    else:
      for movie in kmdb_metadata:
        for director in movie.get("directors").get("director"):
          if director.get("directorNm") == metadata_base["directors"][0]["peopleNm"]:
            flag = 1
            movie_match = movie
            break
        if flag == 1:
          break
    if flag==0:
      print("No matching movie (kobis & KMDB)")
      return -1

    metadata_base["title"] = kobis_metadata["movieNm"]
    metadata_base["titleEng"] = kobis_metadata["movieNmEn"]
    metadata_base["openDate"] = kobis_metadata["openDt"]
    metadata_base["runningTimeMinute"] = kobis_metadata["showTm"]
    #metadata_base["directors"] = kobis_metadata["directors"]
    metadata_base["actors"] = list(map(lambda x: x["peopleNm"], kobis_metadata["actors"][:5]))
    producer_list = list(map(producer, kobis_metadata["companys"]))
    for i in producer_list:
      if i!=None:
        metadata_base["producer"].append(i)
        break
    distributor_list = list(map(distributor, kobis_metadata["companys"]))
    for i in distributor_list:
      if i != None:
        metadata_base["distributor"].append(i)
        break
    genre = genre_modification(list(map(lambda x: x["genreNm"], kobis_metadata["genres"])))
    if genre == -1:
      return -1
    else:
      metadata_base["genre"] = genre

    metadata_base["synopsis"] = movie_match["plots"]["plot"][0]
    keywords = list(set(movie_match["keywords"].split(",")[:7]))[:5]
    metadata_base["keywords"] = keywords
    metadata_base["posterUrl"] = posterUrl(movie_match["posters"])
    trailer(movie_match["DOCID"])
    cnt = 0
    for i in vodUrl_list:
      metadata_base["vodUrl"].append(i)
      cnt+=1
      if cnt == 3:
        break

    if metadata_base["vodUrl"] == []:
      return -1
    if metadata_base['posterUrl'] == []:
      metadata_base['posterUrl'] = "정보 없음";

    metadata_base["directors"] = list(map(lambda x: x["peopleNm"], kobis_metadata["directors"]))
    #write(metadata_base)
    return metadata_base

def make_film_dataset(movie_name, movie_metadata):
    '''
    snu dataverse에 데이터셋 생성
    :param movie_name: 영화 이름, dataset 이름으로 사용
    :param movie_metadata: 영화 메타데이터, dataset 메타데이터로 사용
    :return: 결과 메시지
    '''
    server_url = "https://snu.dataverse.ac.kr"
    parent = "movies"
    route = f"/api/dataverses/{parent}/datasets"

    url = server_url + route

    headers = {"X-Dataverse-key": dataverse_key,
               "Content-Type": "application/json"}
    body: dict
    with open("./sample_data/dataset-default.json", "r", encoding='utf-8') as file:
        json_data = json.load(file)
        body = json_data

    body["datasetVersion"]["metadataBlocks"]["citation"]["fields"][0]["value"] = movie_name
    body["datasetVersion"]["metadataBlocks"]["citation"]["fields"][3]["value"][0]["dsDescriptionValue"]["value"] = \
        json.dumps(movie_metadata, ensure_ascii=False)

    response = requests.post(url, headers=headers, json=body)
    return response.text

"""# Clear all datasets in a dataverse collection"""

def clear_dataverse_collection():
    '''
    데이터버스 콜렉션에서 데이터셋 모두 삭제하는 함수
    '''
    url = "https://snu.dataverse.ac.kr/api/dataverses/movies/contents"
    headers = {"X-Dataverse-key": dataverse_key}

    response = requests.get(url, headers=headers)
    body = json.loads(response.text)
    for dataset in body["data"]:
        dataset_id = dataset["id"]
        dataset_url = f"https://snu.dataverse.ac.kr/api/datasets/{dataset_id}"
        requests.delete(dataset_url, headers=headers)
    response = requests.get(url, headers=headers)
    body = json.loads(response.text)
    print(body)

clear_dataverse_collection()

"""# Movie List to Upload (Read from KOBIS excel file)
### Total: 5505 rows in raw dataset (1450 uploaded on Dataverse)
"""

file_path = "./sample_data/kobis_movies_list.xlsx"
movie_list = pd.read_excel(file_path)
movie_list = movie_list.drop(range(3))
movie_list.reset_index(drop = True, inplace = True)

new_column_names = movie_list.iloc[0]
movie_list.columns = new_column_names
movie_list = movie_list.iloc[1:].reset_index(drop = True)
movie_list[3138:3139]

for movie in movie_list["영화명"]:
  get_metadata_per_movie(movie)